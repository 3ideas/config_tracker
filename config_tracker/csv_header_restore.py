# AUTOGENERATED! DO NOT EDIT! File to edit: 00_csv_header_restore.ipynb (unless otherwise specified).

__all__ = ['read_headers', 'parse_header_line', 'restore_header']

# Cell
#! python
import re

def read_headers(header_file):
    """Reads the header file which consists of lines starting with the table name followed by a : and the header.
    It returns a dictionary of table names and their associated header lines.
    """
    header_lines = {}
    with open(header_file, 'r') as f:
        for line in f:
            table_name, header = parse_header_line(line.rstrip("\n"))
            if table_name is not None:
                header_lines[table_name] = header



    return header_lines

def parse_header_line(line):
    m = re.match('^([^:]+):', line)
    if m:
        table_name = m.group(1)
        line = line[m.end():]
        return table_name,line
    return None,None

def restore_header(filename,output_filename,header,encoding ="latin-1"):
    with open(filename, 'r',encoding=encoding) as f:
        with open(output_filename, 'w',encoding=encoding) as out:
            out.write(header+'\n')
            for line in f:
                line = line.rstrip('\n')
                if line == header:
                    continue
                out.write(line+'\n')





# Cell
try: from nbdev.imports import IN_NOTEBOOK
except: IN_NOTEBOOK=False

if __name__ == "__main__" and not IN_NOTEBOOK:
    import argparse
    import os
    import sys

    ap = argparse.ArgumentParser()
    ap.add_argument("-n", "--header", required=True, help="headers file for restore")
    ap.add_argument("-f", "--file", required=True,
                help="file to be converted")
    ap.add_argument("-o", "--output", required=False,default='',
                help="output filename")
    args = vars(ap.parse_args())

    filename = args["file"]
    headerfile = args["header"]
    output_filename = args['output']

    # Stip the suffex of the filename to get the table_name
    base=os.path.basename(filename)
    table_name = os.path.splitext(base)[0]

    if output_filename == '':
        output_filename = table_name + '.hdr'

    headers = read_headers(headerfile)
    if table_name in headers:
        restore_header(filename,output_filename,headers[table_name])
    else:
        print(f"Skipping file:{filename}  - no associated header found", file=sys.stderr)